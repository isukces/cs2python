using isukces.code;
using isukces.code.interfaces;

namespace CodeGenerator
{
    internal class OneArgMethodGenerator
    {
        public OneArgMethodGenerator(string dotnetName, string pyName, CsClass cl)
        {
            _cl = cl;
            if (pyName == null)
                pyName = dotnetName.ToLower();
            DotnetName = dotnetName;
            PyName = pyName;
        }

        public CsMethod Make(string body)
        {
            var tIn = MakeType(TInput, false);
            var tOut = MakeType(TOutput, true);
            var m = _cl.AddMethod(DotnetName, tOut)
                .WithBody(body)
                .WithStatic()
                .WithDirectCall(PyName)
                .WithBodyComment($"Generated by {nameof(OneArgMethodGenerator)}");
            m.AddParam("x", tIn);
            return m;
        }

        public string Map(string func)
        {
            if (Dimension == 0)
                return func.Replace("#", "x");
            func = ("# => " + func).Replace("#", "value");
            if (Collection == "NdArray")
                return $"x.Map({func})";
            var m = $"PyMap({func})";
            for (var i = 1; i < Dimension; i++)
            {
                var v = "q" + i;
                m = $"PyMap({v} => {v}.{m})";
            }

            return "x." + m;
        }

        private string MakeType(string t, bool o)
        {
            if (Dimension == 0)
                return t;
            if (Collection == "NdArray")
                return $"NdArray{Dimension}D{t.FirstUpper()}";
            var r = t;
            var c = o ? "PyList" : Collection;
            for (var i = 0; i < Dimension; i++)
                r = c + "<" + r + ">";
            return r;
        }

        public string PyName { get; set; }

        public string DotnetName { get; set; }
        public string TInput { get; set; }
        public string TOutput { get; set; }
        public string Collection { get; set; }
        public int Dimension { get; set; }
        private readonly CsClass _cl;
    }
}