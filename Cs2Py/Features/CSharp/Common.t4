<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".ignore" #>
<#+
	List<string> classes=new List<string>();
	string baseClass;

	 private Tuple<string, string, string> Convert(string i)
        {
            int a = i.IndexOf(' ');
            string _type = i.Substring(0, a).Trim();
            string _name, _comment;
            string ii = i.Substring(a).Trim();
            a = ii.IndexOf(';');
            if (a < 0)
            {
                _name = ii;
                _comment = null;
            }
            else
            {
                _name = ii.Substring(0, a).Trim();
                _comment = ii.Substring(a + 1).Trim();
            }
            return new Tuple<string, string, string>(_type, _name, _comment);
        }
        public Tuple<string, string, string>[] Convert(string[] i)
        {
            return i.Select(ii => Convert(ii)).ToArray();
        }
        private string FirstLower(string i)
        {
            i = i.Substring(0, 1).ToLower() + i.Substring(1);
            if (i == "operator" || i == "value") return "_" + i;
            return i;
        }
        private void MakeClass(string cn, string derived, params string[] properties)
        {
			classes.Add(cn);
            if (!string.IsNullOrEmpty(derived))
                derived = " : " + baseClass + ", " + derived;
			else
                derived = " : " + baseClass;

            Write(string.Format("    public sealed partial class {0}{1} {{\r\n", cn, derived));
            var p1 = Convert(properties);
            {
                var pp = string.Join(", ", p1.Select(q => string.Format("{0} {1}", q.Item1, q.Item2)));
                Write(string.Format("      public {0}({1}){{\r\n", cn, pp));
                foreach (var i in p1)
                {
                    Write(string.Format("        this.{0} = {1};\r\n", FirstLower(i.Item2), i.Item2));
                }
                Write(string.Format("      }}\r\n"));
            }


            foreach (var i in p1)
            {
                if (!string.IsNullOrEmpty(i.Item3))
                {
                    Write(string.Format("      /// <summary>\r\n"));
                    Write(string.Format("      /// {0}\r\n", i.Item3));
                    Write(string.Format("      /// </summary>\r\n"));
                }
                Write(string.Format("      public {0} {1} {{\r\n", i.Item1, i.Item2));
                Write(string.Format("        get {{\r\n"));
                Write(string.Format("          return {0};\r\n", FirstLower(i.Item2)));
                Write(string.Format("        }}\r\n"));
                Write(string.Format("      }}\r\n"));
                Write(string.Format("      private {0} {1};\r\n", i.Item1, FirstLower(i.Item2)));
            }
            Write(string.Format("    }} // end of {0}\r\n", cn));
        }


		 private void MakeInterface(string cn, string derived, params string[] properties)
        {
            if (!string.IsNullOrEmpty(derived))
                derived = " : " + derived;
            Write(string.Format("    public interface {0}{1} {{\r\n", cn, derived));

            var p1 = Convert(properties);
            foreach (var i in p1)
            {
                if (!string.IsNullOrEmpty(i.Item3))
                {
                    Write(string.Format("      /// <summary>\r\n"));
                    Write(string.Format("      /// {0}\r\n", i.Item3));
                    Write(string.Format("      /// </summary>\r\n"));
                }
                Write(string.Format("      {0} {1} {{ get; }}\r\n", i.Item1, i.Item2));
            }
            Write(string.Format("    }} // end of {0}\r\n", cn));
        }

		
        void WLF(string x, params object[] o)
        {
            Write(string.Format(x, o) + "\r\n");
        }

		public string MakeShort(string i) {
			if (i.ToLower().StartsWith("csharp"))
			    return i.Substring(6);
			return i;
		}

		public void MakeClassBase()
        {
            WLF("public class {0} {{", baseClass);


			

            WLF("    public {0}Kinds TokenKind", baseClass);
            WLF("    {{");
            WLF("        get");
            WLF("        {{");
            foreach (var i in classes)
                WLF("            if (this is {2}) return {1}Kinds.{0}Kind;", MakeShort(i), baseClass, i);
            WLF("        throw new NotSupportedException();");
            WLF("        }}");
            WLF("    }}");
            WLF("}}");
            WLF("public enum {0}Kinds {{", baseClass);
            foreach (var i in classes)
                WLF("    {0}Kind,", MakeShort(i));
            WLF("}}");

            WLF("public class {0}Visitor<T> {{", baseClass);
            WLF("        public T Visit(CSharpBase a)");
            WLF("        {{");
            WLF("            switch (a.TokenKind)");
            WLF("            {{");
            foreach (var i in classes)
            {
                WLF("                case {1}Kinds.{0}Kind:", MakeShort(i), baseClass);
                WLF("                    return Visit{0}(a as {1});", MakeShort(i), i);
            }
            WLF("            }}");
            WLF("            throw new NotSupportedException();");
            WLF("        }}");
            foreach (var i in classes)
            {
                WLF("    protected virtual T Visit{1}({0} src) {{", i, MakeShort(i));
                WLF("        throw new NotSupportedException();");
                WLF("    }}");
            }
            WLF("}}");
        }

#>